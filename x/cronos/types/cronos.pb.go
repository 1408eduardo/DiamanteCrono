// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cronos/cronos.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the cronos module.
type Params struct {
	ConvertEnabled  []*ConvertEnabled `protobuf:"bytes,1,rep,name=convert_enabled,json=convertEnabled,proto3" json:"convert_enabled,omitempty" yaml:"convert_enabled,omitempty"`
	IbcCroDenom     string            `protobuf:"bytes,2,opt,name=ibc_cro_denom,json=ibcCroDenom,proto3" json:"ibc_cro_denom,omitempty" yaml:"ibc_cro_denom,omitempty"`
	IbcCroChannelid string            `protobuf:"bytes,3,opt,name=ibc_cro_channelid,json=ibcCroChannelid,proto3" json:"ibc_cro_channelid,omitempty" yaml:"ibc_cro_channelid,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc54992a93db2d2, []int{0}
}
func (m *Params) XXXe_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetConvertEnabled() []*ConvertEnabled {
	if m != nil {
		return m.ConvertEnabled
	}
	return nil
}

func (m *Params) GetIbcCroDenom() string {
	if m != nil {
		return m.IbcCroDenom
	}
	return ""
}

func (m *Params) GetIbcCroChannelid() string {
	if m != nil {
		return m.IbcCroChannelid
	}
	return ""
}

// ConvertEnabled maps coin denom to a convert_enabled status (whether a denom is
// convertable).
type ConvertEnabled struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *ConvertEnabled) Reset()      { *m = ConvertEnabled{} }
func (*ConvertEnabled) ProtoMessage() {}
func (*ConvertEnabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bc54992a93db2d2, []int{1}
}
func (m *ConvertEnabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConvertEnabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConvertEnabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConvertEnabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertEnabled.Merge(m, src)
}
func (m *ConvertEnabled) XXX_Size() int {
	return m.Size()
}
func (m *ConvertEnabled) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertEnabled.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertEnabled proto.InternalMessageInfo

func (m *ConvertEnabled) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ConvertEnabled) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "cryptoorgchain.cronos.cronos.Params")
	proto.RegisterType((*ConvertEnabled)(nil), "cryptoorgchain.cronos.cronos.ConvertEnabled")
}

func init() { proto.RegisterFile("cronos/cronos.proto", fileDescriptor_8bc54992a93db2d2) }

var fileDescriptor_8bc54992a93db2d2 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x31, 0x4f, 0xc2, 0x40,
	0x14, 0xc7, 0x7b, 0xa0, 0x88, 0x47, 0x84, 0x58, 0x19, 0x1a, 0x63, 0xae, 0xa4, 0x31, 0x86, 0x01,
	0xda, 0xa8, 0x1b, 0x23, 0xa8, 0x83, 0x2e, 0xa6, 0xa3, 0x0b, 0x69, 0x8f, 0x4b, 0x69, 0x42, 0xef,
	0x35, 0xc7, 0x69, 0x6c, 0xfc, 0x12, 0x8e, 0x8e, 0x6c, 0x7e, 0x15, 0x47, 0x46, 0x27, 0x62, 0x60,
	0x71, 0xe6, 0x13, 0x98, 0xf6, 0xa8, 0xa1, 0x0e, 0x4e, 0xef, 0xbd, 0x7b, 0xef, 0xff, 0xcb, 0xbd,
	0xff, 0xc3, 0x47, 0x54, 0x00, 0x87, 0xa9, 0xa3, 0x82, 0x1d, 0x0b, 0x90, 0xa0, 0x9f, 0x50, 0x91,
	0xc4, 0x12, 0x40, 0x04, 0x74, 0xec, 0x85, 0xdc, 0xde, 0x34, 0x55, 0x38, 0x6e, 0x06, 0x10, 0x40,
	0x36, 0xe8, 0xa4, 0x99, 0xd2, 0x58, 0xef, 0x25, 0x5c, 0xb9, 0xf7, 0x84, 0x17, 0x4d, 0xf5, 0x17,
	0xdc, 0xa0, 0xc0, 0x9f, 0x98, 0x90, 0x43, 0xc6, 0x3d, 0x7f, 0xc2, 0x46, 0x06, 0x6a, 0x95, 0xdb,
	0xb5, 0x8b, 0x8e, 0xfd, 0x1f, 0xd8, 0x1e, 0x28, 0xd1, 0xb5, 0xd2, 0xf4, 0x4f, 0xd7, 0x0b, 0xb3,
	0x95, 0x78, 0xd1, 0xa4, 0x67, 0xfd, 0xc1, 0x75, 0x20, 0x0a, 0x25, 0x8b, 0x62, 0x99, 0x58, 0x6e,
	0x9d, 0x16, 0x54, 0xfa, 0x0d, 0x3e, 0x08, 0x7d, 0x3a, 0xa4, 0x02, 0x86, 0x23, 0xc6, 0x21, 0x32,
	0x4a, 0x2d, 0xd4, 0xde, 0xef, 0x5b, 0xeb, 0x85, 0x49, 0x14, 0xac, 0xd0, 0xde, 0x46, 0xd5, 0x42,
	0x9f, 0x0e, 0x04, 0x5c, 0xa5, 0xef, 0xba, 0x8b, 0x0f, 0xf3, 0x41, 0x3a, 0xf6, 0x38, 0x67, 0x93,
	0x70, 0x64, 0x94, 0x33, 0xd6, 0xd9, 0x7a, 0x61, 0x5a, 0x45, 0xd6, 0xef, 0xc8, 0x36, 0xaf, 0xa1,
	0x78, 0x83, 0xbc, 0xd7, 0xdb, 0x79, 0x9b, 0x99, 0x9a, 0x75, 0x8b, 0xeb, 0xc5, 0x4d, 0xf5, 0x26,
	0xde, 0x55, 0x7f, 0x45, 0x29, 0xdf, 0x55, 0x85, 0x6e, 0xe0, 0xbd, 0xdc, 0xbe, 0x74, 0x87, 0xaa,
	0x9b, 0x97, 0xbd, 0x6a, 0xca, 0xf9, 0x9e, 0x99, 0xa8, 0x7f, 0xf7, 0xb1, 0x24, 0x68, 0xbe, 0x24,
	0xe8, 0x6b, 0x49, 0xd0, 0xeb, 0x8a, 0x68, 0xf3, 0x15, 0xd1, 0x3e, 0x57, 0x44, 0x7b, 0x38, 0x0f,
	0x42, 0x39, 0x7e, 0xf4, 0x6d, 0x0a, 0x91, 0xa3, 0x5c, 0xef, 0x82, 0x08, 0xba, 0x99, 0xef, 0x9b,
	0x6b, 0x3b, 0xcf, 0x79, 0x22, 0x93, 0x98, 0x4d, 0xfd, 0x4a, 0x76, 0xc9, 0xcb, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x51, 0x0c, 0x76, 0x22, 0x14, 0x02, 0x00, 0x00,
}

func (this *ConvertEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConvertEnabled)
	if !ok {
		that2, ok := that.(ConvertEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcCroChannelid) > 0 {
		i -= len(m.IbcCroChannelid)
		copy(dAtA[i:], m.IbcCroChannelid)
		i = encodeVarintCronos(dAtA, i, uint64(len(m.IbcCroChannelid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IbcCroDenom) > 0 {
		i -= len(m.IbcCroDenom)
		copy(dAtA[i:], m.IbcCroDenom)
		i = encodeVarintCronos(dAtA, i, uint64(len(m.IbcCroDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConvertEnabled) > 0 {
		for iNdEx := len(m.ConvertEnabled) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConvertEnabled[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCronos(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConvertEnabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvertEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConvertEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCronos(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCronos(dAtA []byte, offset int, v uint64) int {
	offset -= sovCronos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConvertEnabled) > 0 {
		for _, e := range m.ConvertEnabled {
			l = e.Size()
			n += 1 + l + sovCronos(uint64(l))
		}
	}
	l = len(m.IbcCroDenom)
	if l > 0 {
		n += 1 + l + sovCronos(uint64(l))
	}
	l = len(m.IbcCroChannelid)
	if l > 0 {
		n += 1 + l + sovCronos(uint64(l))
	}
	return n
}

func (m *ConvertEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCronos(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func sovCronos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCronos(x uint64) (n int) {
	return sovCronos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCronos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCronos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConvertEnabled = append(m.ConvertEnabled, &ConvertEnabled{})
			if err := m.ConvertEnabled[len(m.ConvertEnabled)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcCroDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcCroDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcCroChannelid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcCroChannelid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCronos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvertEnabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvertEnabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvertEnabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCronos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCronos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCronos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCronos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCronos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCronos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCronos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCronos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCronos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCronos = fmt.Errorf("proto: unexpected end of group")
)
